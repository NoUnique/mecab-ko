diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..fa8fba9
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,26 @@
+# mecab-ko ChangeLog
+
+## mecab-ko-0.9.2 (mecab-0.996)
+
+  - 오류 수정
+    - mecabrc의 dicdir 값을 '@prefix@/lib/mecab/dic/mecab-ko-dic' 으로 변경
+    - Java swig 메모리릭 오류 수정
+
+## mecab-ko-0.9.1 (mecab-0.996)
+  - 새로운 사전 추가시 에러나는 버그 수정. (좌/우문맥ID 찾기와 비용계산이 자동으로 안되던 버그 수정.)
+
+## mecab-ko-0.9.0 (mecab-0.996)
+
+  - MeCab 0.996 기반
+  - MeCab의 사전 설정(dicrc)에서 좌측에 공백 문자를 포함하는 품사의 연접 비용을 늘릴 수 있게 설정하는 기능 추가
+
+### 좌측 공백 포함 문자 연접 비용 늘리는 설정 예 (dicrc)
+
+    :::text
+    # 좌측에 공백을 포함하는 품사의 연접 비용을 늘리기 위한 설정입니다.
+    # mecab-ko에서만 사용되는 설정입니다. 다음과 같은 형식을 가집니다.
+    # <posid 1>,<posid 1 penalty cost>,<posid 2>,<posid 2 penalty cost> ...
+    # 
+    # 예) 120,6000 => posid가 120인 품사(조사)의 좌측에 공백을 포함할 경우
+    # 연접 비용을 6000만큼 늘림
+    left-space-penalty-factor = 120,6000,184,6000,100,500
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..2354dbb
--- /dev/null
+++ b/README.md
@@ -0,0 +1,76 @@
+# mecab-ko 소개
+
+[mecab-ko](https://bitbucket.org/eunjeon/mecab-ko)는 [은전한닢 프로젝트](http://eunjeon.blogspot.kr/)에서 사용하기 위한 [MeCab](http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html)의 fork 프로젝트 입니다.
+
+최소한의 변경으로 한국어의 특성에 맞는 기능을 추가하는 것이 목표입니다.
+
+# mecab-ko에서 추가된 기능.
+
+## 공백 문자(white space)를 포함하는 특정 품사 비용 늘림
+
+띄어쓰기를 하지 않는 일본어와 달리 띄어쓰기를 하는 한국어 특성에 맞게 특정 품사가 띄어쓰기 되어있는 경우 해당 품사의 비용을 늘리는 기능 (사전 설정(dicrc)에 설정 값을 지정)
+
+__mecab을 사용하여 분석__
+
+    :::text
+    화학 이외의 것
+    화학    NN,T,화학,*,*,*,*
+    이      JKS,F,이,*,*,*,*
+    외      NN,F,외,*,*,*,*
+    의      JKG,F,의,*,*,*,*
+    것      NNB,T,것,*,*,*,*
+    EOS
+
+__mecab-ko를 사용하여 분석__
+
+    :::text
+    화학 이외의 것
+    화학    NN,T,화학,*,*,*,*
+    이외    NN,F,이외,*,*,*,*
+    의      JKG,F,의,*,*,*,*
+    것      NNB,T,것,*,*,*,*
+    EOS
+
+### 설정 방법
+
+MeCab의 사전 설정(dicrc)에서 다음과 같이 설정합니다.
+
+    :::text
+    # 좌측에 공백을 포함하는 품사의 연접 비용을 늘리기 위한 설정입니다.
+    # mecab-ko에서만 사용되는 설정입니다. 다음과 같은 형식을 가집니다.
+    # <posid 1>,<posid 1 penalty cost>,<posid 2>,<posid 2 penalty cost> ...
+    # 
+    # 예) 120,6000 => posid가 120인 품사(조사)의 좌측에 공백을 포함할 경우
+    # 연접 비용을 6000만큼 늘림
+    left-space-penalty-factor = 120,6000,184,6000,100,500
+
+# mecab-ko의 설치와 사용법
+
+## mecab-ko 설치
+
+  [mecab-ko 다운로드 페이지](https://bitbucket.org/eunjeon/mecab-ko/downloads)에서 최신 버전의 소스를 다운 받고 설치합니다. tar.gz 압축을 해제하고 일반적인 자유 소프트웨어와 같은 순서로 설치할 수 있습니다.
+
+    :::text
+    $ tar zxfv mecab-ko-XX.tar.gz
+    $ cd mecab-ko-XX
+    $ ./configure 
+    $ make
+    $ make check
+    $ su
+    # make install
+
+설치 방법은 MeCab와 동일하므로, 자세한 내용은 [MeCab 홈페이지](http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html)를 참조하시기 바랍니다.
+
+### 참고
+
+  * 오래된 버전의 리눅스 환경에서 컴파일이 안되는 경우, 다음의 글을 참조하시기 바랍니다. [Cent OS 5.9에서 MeCab 및 mecab-ko-dic 설치하기](http://eunjeon.blogspot.kr/2013/02/cent-os-59-mecab-mecab-ko-dic.html)
+
+## 한국어 사전(mecab-ko-dic)의 설치와 사용
+
+  [mecab-ko-dic](https://bitbucket.org/eunjeon/mecab-ko-dic)의 설명을 참조하시기 바랍니다.
+
+# 라이센스
+
+mecab-ko의 라이센스는 MeCab의 라이센스를 그대로 따릅니다.
+
+> MeCab 는 무료 소프트웨어입니다. GPL (the GNU General Public License), LGPL (Lesser GNU General Public License) 또는 BSD 라이선스에 따라 소프트웨어를 사용, 재배포할 수 있습니다. 자세한 내용은 COPYING, GPL, LGPL, BSD 각 파일을 참조하십시오.
diff --git a/configure b/configure
index 27ff54b..7486855 100755
--- a/configure
+++ b/configure
@@ -3027,7 +3027,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE=mecab
- VERSION=0.996
+ VERSION=0.996/ko-0.9.2
 
 
 cat >>confdefs.h <<_ACEOF
diff --git a/configure.in b/configure.in
index a5e2a5e..dbb093f 100644
--- a/configure.in
+++ b/configure.in
@@ -3,7 +3,7 @@ AC_INIT(src/mecab.cpp)
 AH_TEMPLATE([HAVE_GCC_ATOMIC_OPS], [])
 AH_TEMPLATE([HAVE_OSX_ATOMIC_OPS], [])
 AH_TEMPLATE([HAVE_TLS_KEYWORD], [])
-AM_INIT_AUTOMAKE(mecab, 0.996)
+AM_INIT_AUTOMAKE(mecab, 0.996/ko-0.9.2)
 AC_CONFIG_MACRO_DIR([m4])
 
 # DIC_VERSION XXYY
diff --git a/mecabrc.in b/mecabrc.in
index cde7072..fc15dc6 100644
--- a/mecabrc.in
+++ b/mecabrc.in
@@ -3,7 +3,7 @@
 ;
 ; $Id: mecabrc.in,v 1.3 2006/05/29 15:36:08 taku-ku Exp $;
 ;
-dicdir =  @prefix@/lib/mecab/dic/ipadic
+dicdir =  @prefix@/lib/mecab/dic/mecab-ko-dic
 
 ; userdic = /home/foo/bar/user.dic
 
diff --git a/src/connector.cpp b/src/connector.cpp
index 4021cbe..31ccc20 100644
--- a/src/connector.cpp
+++ b/src/connector.cpp
@@ -16,10 +16,13 @@ namespace MeCab {
 bool Connector::open(const Param &param) {
   const std::string filename = create_filename
       (param.get<std::string>("dicdir"), MATRIX_FILE);
-  return open(filename.c_str());
+  return open(
+      filename.c_str(),
+      param.get<std::string>("left-space-penalty-factor").c_str());
 }
 
 bool Connector::open(const char* filename,
+                     const char* left_space_penalty_factor_str,
                      const char *mode) {
   CHECK_FALSE(cmmap_->open(filename, mode))
       << "cannot open: " << filename;
@@ -38,13 +41,51 @@ bool Connector::open(const char* filename,
       << "file size is invalid: " << filename;
 
   matrix_ = cmmap_->begin() + 2;
+
+  set_left_space_penalty_factor(left_space_penalty_factor_str);
   return true;
 }
 
+void Connector::set_left_space_penalty_factor(const char *factor_str) {
+  if (factor_str == NULL) return;
+
+  char s[512];
+  snprintf(s, sizeof(s), "%s", factor_str);
+
+  const size_t max_num_space_penalty_pos_ids = 64;
+  char *col[max_num_space_penalty_pos_ids];
+  const size_t n = tokenizeCSV(s, col, max_num_space_penalty_pos_ids);
+  for (size_t i = 0; i < n; i += 2) {
+    left_space_penalty_factor_.push_back(
+        SpacePenalty(
+            (unsigned short )strtoul(col[i], NULL, 0),
+            (int )strtol(col[i+1], NULL, 0)));
+  }
+}
+
 void Connector::close() {
   cmmap_->close();
 }
 
+int Connector::cost(const Node *lNode, const Node *rNode) const {
+  return matrix_[lNode->rcAttr + lsize_ * rNode->lcAttr] +
+      rNode->wcost +
+      get_space_penalty_cost(rNode);
+}
+
+int Connector::get_space_penalty_cost(const Node *rNode) const {
+  if (rNode->rlength == rNode->length) {
+    // has no space
+    return 0;
+  }
+  for (size_t i = 0; i < left_space_penalty_factor_.size(); ++i) {
+    if (rNode->posid == left_space_penalty_factor_[i].posid_) {
+      return this->left_space_penalty_factor_[i].penalty_cost_;
+    }
+  }
+  return 0;
+}
+
 bool Connector::openText(const char *filename) {
   std::ifstream ifs(WPATH(filename));
   if (!ifs) {
diff --git a/src/connector.h b/src/connector.h
index 87b294c..6c1920e 100644
--- a/src/connector.h
+++ b/src/connector.h
@@ -22,6 +22,21 @@ class Connector {
   unsigned short  rsize_;
   whatlog         what_;
 
+  // mecab-ko
+  class SpacePenalty {
+    public:
+      unsigned short posid_;
+      int penalty_cost_;
+      SpacePenalty(unsigned short posid, int penalty_cost)
+        : posid_(posid)
+        , penalty_cost_(penalty_cost)
+      {}
+  };
+  std::vector<SpacePenalty>left_space_penalty_factor_;
+
+  void set_left_space_penalty_factor(const char *factor_str);
+  int get_space_penalty_cost(const Node *rNode) const;
+
  public:
 
   bool open(const Param &param);
@@ -41,16 +56,14 @@ class Connector {
     return matrix_[rcAttr + lsize_ * lcAttr];
   }
 
-  inline int cost(const Node *lNode, const Node *rNode) const {
-    return matrix_[lNode->rcAttr + lsize_ * rNode->lcAttr] + rNode->wcost;
-  }
+  int cost(const Node *lNode, const Node *rNode) const;
 
   // access to raw matrix
   short *mutable_matrix() { return &matrix_[0]; }
   const short *matrix() const { return &matrix_[0]; }
 
   bool openText(const char *filename);
-  bool open(const char *filename, const char *mode = "r");
+  bool open(const char *filename, const char *white_space_penalty_info = "", const char *mode = "r");
 
   bool is_valid(size_t lid, size_t rid) const {
     return (lid >= 0 && lid < rsize_ && rid >= 0 && rid < lsize_);
diff --git a/src/dictionary.cpp b/src/dictionary.cpp
index f171dd4..9bf0b9e 100644
--- a/src/dictionary.cpp
+++ b/src/dictionary.cpp
@@ -172,21 +172,23 @@ bool Dictionary::assignUserDictionaryCosts(
   property.set_charset(from.c_str());
 
   if (!matrix.openText(matrix_file.c_str()) &&
-      !matrix.open(matrix_bin_file.c_str())) {
+      !matrix.open(
+          matrix_bin_file.c_str(),
+          param.get<std::string>("white-space-penalty-infos").c_str())) {
     matrix.set_left_size(1);
     matrix.set_right_size(1);
   }
 
   cid.open(left_id_file.c_str(),
            right_id_file.c_str(), &config_iconv);
-  CHECK_DIE(cid.left_size()  == matrix.left_size() &&
-            cid.right_size() == matrix.right_size())
+  CHECK_DIE(cid.left_size()  == matrix.right_size() &&
+            cid.right_size() == matrix.left_size())
       << "Context ID files("
       << left_id_file
       << " or "
       << right_id_file << " may be broken: "
-      << cid.left_size() << " " << matrix.left_size() << " "
-      << cid.right_size() << " " << matrix.right_size();
+      << cid.left_size() << " " << matrix.right_size() << " "
+      << cid.right_size() << " " << matrix.left_size();
 
   std::ofstream ofs(output);
   CHECK_DIE(ofs) << "permission denied: " << output;
@@ -282,7 +284,9 @@ bool Dictionary::compile(const Param &param,
   }
 
   if (!matrix.openText(matrix_file.c_str()) &&
-      !matrix.open(matrix_bin_file.c_str())) {
+      !matrix.open(
+          matrix_bin_file.c_str(),
+          param.get<std::string>("white-space-penalty-infos").c_str())) {
     matrix.set_left_size(1);
     matrix.set_right_size(1);
   }
@@ -352,8 +356,8 @@ bool Dictionary::compile(const Param &param,
           cid.reset(new ContextID);
           cid->open(left_id_file.c_str(),
                     right_id_file.c_str(), &config_iconv);
-          CHECK_DIE(cid->left_size()  == matrix.left_size() &&
-                    cid->right_size() == matrix.right_size())
+          CHECK_DIE(cid->left_size()  == matrix.right_size() &&
+                    cid->right_size() == matrix.left_size())
               << "Context ID files("
               << left_id_file
               << " or "
diff --git a/swig/MeCab.i b/swig/MeCab.i
index 4293942..e077f2e 100644
--- a/swig/MeCab.i
+++ b/swig/MeCab.i
@@ -14,6 +14,8 @@
 %}
 
 %newobject surface;
+%newobject MeCab::Model::createLattice;
+%newobject MeCab::Model::createTagger;
 
 %exception {
   try { $action }
diff --git a/swig/version.h b/swig/version.h
index b7fbc39..323d0e1 100644
--- a/swig/version.h
+++ b/swig/version.h
@@ -1,3 +1,3 @@
 namespace MeCab {
-#   define VERSION "0.996"
+#   define VERSION "0.996/ko-0.9.0"
 }
